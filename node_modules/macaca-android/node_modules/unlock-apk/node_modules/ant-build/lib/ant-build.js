/* ================================================================
 * ant-build by xdf(xudafeng[at]126.com)
 *
 * first created at : Sat Jan 02 2016 21:49:22 GMT+0800 (CST)
 *
 * ================================================================
 * Copyright  xdf
 *
 * Licensed under the MIT License
 * You may not use this file except in compliance with the License.
 *
 * ================================================================ */

'use strict';

var fs = require('fs');
var path = require('path');
var _ = require('./helper');
var spawn = require('win-spawn');
var JAVA_HOME = require('java-home');
var ant = require('ant-lite').binPath;

//var isWindows = _.platform.isWindows;

function selectAndroidSdkSync() {
  var env = global.process.env;

  if (!env.ANDROID_HOME) {
    //throw 'ANDROID_HOME is not set';
    console.log('ANDROID_HOME is not set');
    return null;
  }

  var platforms = path.join(env.ANDROID_HOME, 'platforms');

  if (!_.isExistedDir(platforms)) {
    console.log('platforms directory is not exist');
    return null;
  }

  var res = fs.readdirSync(platforms);

  res = _.filter(res, function(n) {
    return !!~n.indexOf('android');
  });

  if (!res.length) {
    console.log('platforms directory is not exist');
    return null;
  }

  return res;
}

function checkEnv(cwd) {
  return JAVA_HOME.getPath().then(javaHome => {
    console.log('JAVA_HOME is set to ' + javaHome);

    var sdkVersion = selectAndroidSdkSync();

    if (!sdkVersion) {
      throw(new Error('sdk not select'));
    }

    var propertyFile = path.join(cwd, 'project.properties');
    var properties = fs.readFileSync(propertyFile, 'utf8');

    properties = properties.split('target=')[0];
    properties += 'target=' + sdkVersion[sdkVersion.length - 1];

    fs.writeFileSync(propertyFile, properties);
    return cwd;
  });
}

function antBuild(cwd) {
  return new Promise((resolve, reject) => {
    var antProcess = spawn(ant, ['debug'], {
      cwd: cwd
    });

    antProcess.on('error', function(err) {
      reject(err);
    });

    antProcess.stdout.setEncoding('utf8');
    antProcess.stderr.setEncoding('utf8');

    antProcess.stdout.on('data', function(data) {
      console.log(data);
    });
    antProcess.stderr.on('data', function(data) {
      console.log(data);
    });

    antProcess.on('exit', function(code) {
      if (code !== 0) {
        reject(new Error('build failed'));
      } else {
        resolve('build success!');
      }
    });
  });
}

module.exports = function(options) {
  var cwd = path.resolve(options.cwd);
  return checkEnv(cwd).then(antBuild);
};
